const cells = document.querySelectorAll('.cell');
const statusDisplay = document.querySelector('#status .current-player'); // –í—ã–±–∏—Ä–∞–µ–º span –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const resetButton = document.getElementById('reset-button');
const scoreXDisplay = document.getElementById('score-x');
const scoreODisplay = document.getElementById('score-o');

let gameActive = true;
let currentPlayer = 'X';
let gameState = ["", "", "", "", "", "", "", "", ""];
let scores = { 'X': 0, 'O': 0 }; // –ù–û–í–û–ï: –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞

const winningConditions = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [0, 3, 6], [1, 4, 7], [2, 5, 8],
    [0, 4, 8], [2, 4, 6]
];

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π ---

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞ –Ω–∞ –¥–æ—Å–∫–µ.
 */
function updateScoreDisplay() {
    scoreXDisplay.textContent = `X: ${scores['X']}`;
    scoreODisplay.textContent = `O: ${scores['O']}`;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.
 */
function initializeGame() {
    // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
    const storedScores = localStorage.getItem('ticTacToeScores');
    if (storedScores) {
        scores = JSON.parse(storedScores);
    }
    updateScoreDisplay();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ DOM
    statusDisplay.textContent = currentPlayer;
    statusDisplay.setAttribute('data-player', currentPlayer);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ.
 */
function handleCellClick(clickedCellEvent) {
    const clickedCell = clickedCellEvent.target;
    const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

    if (gameState[clickedCellIndex] !== "" || !gameActive) {
        return;
    }

    gameState[clickedCellIndex] = currentPlayer;
    clickedCell.innerHTML = currentPlayer;

    handleResultValidation();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç.
 */
function handleResultValidation() {
    let roundWon = false;
    let winningCombo = null;

    for (let i = 0; i < winningConditions.length; i++) {
        const winCondition = winningConditions[i];
        let a = gameState[winCondition[0]];
        let b = gameState[winCondition[1]];
        let c = gameState[winCondition[2]];

        if (a === '' || b === '' || c === '') continue;
        if (a === b && b === c) {
            roundWon = true;
            winningCombo = winCondition;
            break;
        }
    }

    if (roundWon) {
        statusDisplay.parentNode.innerHTML = `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <span class="current-player" data-player="${currentPlayer}">${currentPlayer}</span>! üéâ`;
        gameActive = false;

        // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        scores[currentPlayer]++;
        localStorage.setItem('ticTacToeScores', JSON.stringify(scores));
        updateScoreDisplay();

        winningCombo.forEach(index => {
            cells[index].classList.add('winning-cell');
        });
        return;
    }

    let roundDraw = !gameState.includes("");
    if (roundDraw) {
        statusDisplay.parentNode.innerHTML = `–ù–∏—á—å—è! ü§ù`;
        gameActive = false;
        return;
    }

    handlePlayerChange();
}

/**
 * –ú–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å.
 */
function handlePlayerChange() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å—Ç–∏–ª–µ–π
    statusDisplay.parentNode.innerHTML = `–•–æ–¥–∏—Ç: <span class="current-player" data-player="${currentPlayer}">${currentPlayer}</span>`;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 */
function handleRestartGame() {
    gameActive = true;
    currentPlayer = 'X';
    gameState = ["", "", "", "", "", "", "", "", ""];
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
    const statusContainer = document.getElementById('status');
    statusContainer.innerHTML = `–•–æ–¥–∏—Ç: <span class="current-player" data-player="${currentPlayer}">${currentPlayer}</span>`;

    cells.forEach(cell => {
        cell.innerHTML = "";
        cell.classList.remove('winning-cell');
    });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
cells.forEach(cell => cell.addEventListener('click', handleCellClick));
resetButton.addEventListener('click', handleRestartGame);

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
initializeGame();
