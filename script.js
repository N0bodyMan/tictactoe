const cells = document.querySelectorAll('.cell');
const statusDisplay = document.getElementById('status');
const resetButton = document.getElementById('reset-button');

let gameActive = true;
let currentPlayer = 'X';
let gameState = ["", "", "", "", "", "", "", "", ""]; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

// –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å—ã –∫–ª–µ—Ç–æ–∫)
const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π ---

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ.
 * @param {Event} clickedCellEvent - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞.
 */
function handleCellClick(clickedCellEvent) {
    const clickedCell = clickedCellEvent.target;
    const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥: –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ò –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞
    if (gameState[clickedCellIndex] !== "" || !gameActive) {
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    gameState[clickedCellIndex] = currentPlayer;
    clickedCell.innerHTML = currentPlayer;

    handleResultValidation();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∫—Ç–æ-—Ç–æ –∏–ª–∏ –Ω–∏—á—å—è.
 */
function handleResultValidation() {
    let roundWon = false;
    let winningCombo = null;

    for (let i = 0; i < winningConditions.length; i++) {
        const winCondition = winningConditions[i];
        let a = gameState[winCondition[0]];
        let b = gameState[winCondition[1]];
        let c = gameState[winCondition[2]];

        if (a === '' || b === '' || c === '') {
            continue; // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–∞—è
        }
        if (a === b && b === c) {
            roundWon = true;
            winningCombo = winCondition;
            break;
        }
    }

    if (roundWon) {
        statusDisplay.innerHTML = `–ò–≥—Ä–æ–∫ ${currentPlayer} –ø–æ–±–µ–¥–∏–ª! üéâ`;
        gameActive = false;

        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
        winningCombo.forEach(index => {
            cells[index].classList.add('winning-cell');
        });
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é (–µ—Å–ª–∏ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ –∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
    let roundDraw = !gameState.includes("");
    if (roundDraw) {
        statusDisplay.innerHTML = `–ù–∏—á—å—è! ü§ù`;
        gameActive = false;
        return;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –º–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    handlePlayerChange();
}

/**
 * –ú–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å.
 */
function handlePlayerChange() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    statusDisplay.innerHTML = `–•–æ–¥–∏—Ç: ${currentPlayer}`;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 */
function handleRestartGame() {
    gameActive = true;
    currentPlayer = 'X';
    gameState = ["", "", "", "", "", "", "", "", ""];
    statusDisplay.innerHTML = `–•–æ–¥–∏—Ç: ${currentPlayer}`;

    cells.forEach(cell => {
        cell.innerHTML = "";
        cell.classList.remove('winning-cell');
    });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
cells.forEach(cell => cell.addEventListener('click', handleCellClick));
resetButton.addEventListener('click', handleRestartGame);
